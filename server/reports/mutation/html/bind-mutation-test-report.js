document.querySelector('mutation-test-report-app').report = {"files":{"/Users/steve/learnvault/server/controllers/user.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":32,"line":1},"start":{"column":24,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1","location":{"end":{"column":35,"line":2},"start":{"column":21,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3","location":{"end":{"column":2,"line":15},"start":{"column":36,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2","location":{"end":{"column":38,"line":4},"start":{"column":22,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"4","location":{"end":{"column":33,"line":14},"start":{"column":26,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"5","location":{"end":{"column":62,"line":14},"start":{"column":40,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"6","location":{"end":{"column":60,"line":14},"start":{"column":51,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":2,"line":60},"start":{"column":35,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"9","location":{"end":{"column":4,"line":59},"start":{"column":42,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"8","location":{"end":{"column":25,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"10","location":{"end":{"column":12,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"11","location":{"end":{"column":12,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"12","location":{"end":{"column":6,"line":30},"start":{"column":14,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"13","location":{"end":{"column":39,"line":28},"start":{"column":21,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"14","location":{"end":{"column":35,"line":29},"start":{"column":27,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"15","location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"16","location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"17","location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}},"mutatorName":"BooleanLiteral","replacement":"user","status":"Survived"},{"id":"18","location":{"end":{"column":6,"line":37},"start":{"column":16,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"19","location":{"end":{"column":40,"line":35},"start":{"column":19,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"22","location":{"end":{"column":22,"line":42},"start":{"column":11,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"21","location":{"end":{"column":6,"line":58},"start":{"column":77,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"24","location":{"end":{"column":8,"line":45},"start":{"column":24,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"23","location":{"end":{"column":22,"line":42},"start":{"column":11,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"25","location":{"end":{"column":37,"line":43},"start":{"column":21,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":37,"line":44},"start":{"column":29,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"27","location":{"end":{"column":18,"line":48},"start":{"column":11,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"28","location":{"end":{"column":18,"line":48},"start":{"column":11,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"29","location":{"end":{"column":18,"line":48},"start":{"column":11,"line":48}},"mutatorName":"BooleanLiteral","replacement":"result","status":"Survived"},{"id":"30","location":{"end":{"column":8,"line":51},"start":{"column":20,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"31","location":{"end":{"column":41,"line":49},"start":{"column":21,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"32","location":{"end":{"column":37,"line":50},"start":{"column":29,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"34","location":{"end":{"column":88,"line":56},"start":{"column":47,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":33,"line":55},"start":{"column":23,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"36","location":{"end":{"column":59,"line":57},"start":{"column":41,"line":57}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"35","location":{"end":{"column":32,"line":57},"start":{"column":25,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"37","location":{"end":{"column":57,"line":57},"start":{"column":53,"line":57}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"38","location":{"end":{"column":96,"line":57},"start":{"column":66,"line":57}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"39","location":{"end":{"column":86,"line":57},"start":{"column":77,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"40","location":{"end":{"column":2,"line":111},"start":{"column":44,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"42","location":{"end":{"column":25,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"43","location":{"end":{"column":25,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"45","location":{"end":{"column":49,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"44","location":{"end":{"column":4,"line":77},"start":{"column":27,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"47","location":{"end":{"column":50,"line":83},"start":{"column":38,"line":83}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"46","location":{"end":{"column":47,"line":76},"start":{"column":43,"line":76}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"49","location":{"end":{"column":24,"line":85},"start":{"column":7,"line":85}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"48","location":{"end":{"column":24,"line":85},"start":{"column":7,"line":85}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"51","location":{"end":{"column":44,"line":86},"start":{"column":21,"line":86}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"50","location":{"end":{"column":4,"line":87},"start":{"column":26,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"53","location":{"end":{"column":70,"line":95},"start":{"column":25,"line":95}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"52","location":{"end":{"column":42,"line":86},"start":{"column":38,"line":86}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"54","location":{"end":{"column":6,"line":106},"start":{"column":23,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"55","location":{"end":{"column":42,"line":100},"start":{"column":19,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"57","location":{"end":{"column":88,"line":104},"start":{"column":47,"line":104}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"56","location":{"end":{"column":33,"line":103},"start":{"column":23,"line":103}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"58","location":{"end":{"column":32,"line":105},"start":{"column":25,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"59","location":{"end":{"column":59,"line":105},"start":{"column":41,"line":105}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"60","location":{"end":{"column":57,"line":105},"start":{"column":53,"line":105}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"61","location":{"end":{"column":106,"line":105},"start":{"column":66,"line":105}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"20","location":{"end":{"column":35,"line":36},"start":{"column":27,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"62","location":{"end":{"column":96,"line":105},"start":{"column":92,"line":105}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"63","location":{"end":{"column":6,"line":110},"start":{"column":21,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"65","location":{"end":{"column":30,"line":109},"start":{"column":16,"line":109}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"64","location":{"end":{"column":51,"line":108},"start":{"column":19,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"41","location":{"end":{"column":48,"line":73},"start":{"column":39,"line":73}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\nconst User = require('../models/user');\n\nconst saltRounds = 10;\nconst secret = process.env.JWT_SECRET;\n\n// ----------\n// Logout user\n// ----------\n\nexports.logoutUser = (req, res) => {\n  return res.clearCookie('token').send({ attempt: 'success' });\n};\n\n// ----------\n// Login user\n// ----------\n\nexports.loginUser = (req, res) => {\n  const { email, password } = req.body;\n\n  User.findOne({ email }, (err, user) => {\n    // Database error\n    // TODO: pass something back to the front-end to let the client know a DB error occured\n    if (err) {\n      console.error('Database error: ', err);\n      return res.redirect('/login');\n    }\n\n    // User doesn't exist\n    // TODO: pass something back to let the front-end know that user doesn't exist\n    if (!user) {\n      console.log('User doesn\\'t exist');\n      return res.redirect('/login');\n    }\n\n    // compare passwords and make sure they match\n    return bcrypt.compare(password, user.password, (bcryptError, result) => {\n      // TODO: let the front-end know that bcrypt ran into an error\n      if (bcryptError) {\n        console.log('Bcrypt error: ', bcryptError);\n        return res.redirect('/login');\n      }\n\n      // TODO: let the client know the password is incorrect\n      if (!result) {\n        console.log('Incorrect password');\n        return res.redirect('/login');\n      }\n\n      // If everything went well, issue a token\n      const { _id: userId } = user;\n      const payload = { userId };\n      const token = jwt.sign(payload, secret, { expiresIn: process.env.JWT_EXPIRATION });\n      return res.cookie('token', token, { httpOnly: true }).send({ attempt: 'success', userId });\n    });\n  });\n};\n\n// -------------\n// Register user\n// -------------\n\nexports.registerUser = async (req, res) => {\n  const { email, username, password } = req.body;\n\n  // --------------------------------------------------------------\n  // Check to see if somebody with that email is already registered\n  // --------------------------------------------------------------\n\n  const emailFromDb = await User.find({ email });\n\n  if (emailFromDb.length) {\n    return res.send({ emailAlreadyExists: true });\n  }\n\n  // ---------------------------------------------\n  // Check to see if the username is already taken\n  // ---------------------------------------------\n\n  const userFromDb = await User.find({ username });\n\n  if (userFromDb.length) {\n    return res.send({ usernameTaken: true });\n  }\n\n  // ------------------------------------------------------------\n  // No errors so far, go ahead and try to add the user to the DB\n  // ------------------------------------------------------------\n\n  // This is also possible to do with pre save hooks in mongoose\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\n  const user = new User({ email, username, password: hashedPassword });\n\n  return user\n    .save()\n    .then((result) => {\n      console.log('User added to the DB!');\n\n      const { _id: userId } = result;\n      const payload = { userId };\n      const token = jwt.sign(payload, secret, { expiresIn: process.env.JWT_EXPIRATION });\n      return res.cookie('token', token, { httpOnly: true }).send({ registrationSuccessful: true, userId });\n    })\n    .catch((err) => {\n      console.log('Error when saving user to DB: ', err);\n      res.send({ error: err });\n    });\n};\n"},"/Users/steve/learnvault/server/models/Collection.js":{"language":"javascript","mutants":[{"id":"66","location":{"end":{"column":36,"line":1},"start":{"column":26,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"67","location":{"end":{"column":2,"line":59},"start":{"column":37,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"68","location":{"end":{"column":43,"line":25},"start":{"column":11,"line":25}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"69","location":{"end":{"column":41,"line":25},"start":{"column":37,"line":25}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"70","location":{"end":{"column":42,"line":26},"start":{"column":10,"line":26}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"71","location":{"end":{"column":40,"line":26},"start":{"column":36,"line":26}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"76","location":{"end":{"column":35,"line":29},"start":{"column":17,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"72","location":{"end":{"column":48,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"73","location":{"end":{"column":46,"line":27},"start":{"column":42,"line":27}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"80","location":{"end":{"column":27,"line":41},"start":{"column":11,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"81","location":{"end":{"column":28,"line":50},"start":{"column":10,"line":50}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"82","location":{"end":{"column":27,"line":50},"start":{"column":11,"line":50}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"79","location":{"end":{"column":28,"line":41},"start":{"column":10,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"74","location":{"end":{"column":44,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"83","location":{"end":{"column":4,"line":53},"start":{"column":13,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"84","location":{"end":{"column":27,"line":54},"start":{"column":9,"line":54}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"75","location":{"end":{"column":42,"line":28},"start":{"column":38,"line":28}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"85","location":{"end":{"column":26,"line":54},"start":{"column":10,"line":54}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"77","location":{"end":{"column":34,"line":29},"start":{"column":18,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"78","location":{"end":{"column":4,"line":40},"start":{"column":9,"line":38}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"86","location":{"end":{"column":4,"line":58},"start":{"column":12,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"87","location":{"end":{"column":47,"line":61},"start":{"column":35,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\n/* ================== Collection Schema ==================\n  author: {},       // The creator of the collection - references user table\n  title: {},        // The title of the collection - string\n  description: {},  // The description of the collection - string\n  private: {},      // Whether the collection is private or public - boolean\n  contributors: [], // Contributors with edit access - array references users table\n  text: {},         // The content of the collection - string\n  links: [],        // Links in the collection - array of strings\n  likes: [],        // Likes on the collection - array of users - references users table\n  category: {},     // Category of the collection - String\n  tags: [],         // Tags on a collection - Array of Strings\n  updated: {}       // The last date the collection was updated - default date.now when saved\n  ========================================================\n*/\n\nconst CollectionSchema = new Schema({\n  // author: {\n  //   type: Schema.Types.ObjectId,\n  //   ref: 'users',\n  // },\n  author: { type: String, required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  hidden: { type: Boolean, required: true },\n  contributors: [{ type: String }],\n  // contributors: [\n  //   {\n  //     user: {\n  //       type: Schema.Types.ObjectId,\n  //       ref: 'users',\n  //     },\n  //   },\n  // ],\n  text: {\n    type: String,\n  },\n  links: [{ type: String }],\n  // likes: [\n  //   {\n  //     user: {\n  //       type: Schema.Types.ObjectId,\n  //       ref: 'users',\n  //     },\n  //   },\n  // ],\n  likes: [{ type: String }],\n  category: {\n    type: String,\n  },\n  tags: [{ type: String }],\n  updated: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nconst Collection = mongoose.model('collection', CollectionSchema);\n\nmodule.exports = Collection;\n"},"/Users/steve/learnvault/server/models/user.js":{"language":"javascript","mutants":[{"id":"88","location":{"end":{"column":36,"line":1},"start":{"column":26,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"89","location":{"end":{"column":2,"line":21},"start":{"column":31,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"90","location":{"end":{"column":4,"line":9},"start":{"column":10,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"91","location":{"end":{"column":19,"line":8},"start":{"column":15,"line":8}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"93","location":{"end":{"column":19,"line":12},"start":{"column":15,"line":12}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"92","location":{"end":{"column":4,"line":13},"start":{"column":13,"line":10}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"94","location":{"end":{"column":4,"line":17},"start":{"column":13,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"95","location":{"end":{"column":19,"line":16},"start":{"column":15,"line":16}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"96","location":{"end":{"column":23,"line":19},"start":{"column":5,"line":19}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"98","location":{"end":{"column":39,"line":23},"start":{"column":33,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"97","location":{"end":{"column":22,"line":19},"start":{"column":6,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"const mongoose = require('mongoose');\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  savedcollections:\n    [{ type: String }]\n  ,\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n"},"/Users/steve/learnvault/server/routes/api/collections.js":{"language":"javascript","mutants":[{"id":"99","location":{"end":{"column":34,"line":1},"start":{"column":25,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"100","location":{"end":{"column":53,"line":5},"start":{"column":28,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"101","location":{"end":{"column":41,"line":6},"start":{"column":22,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"102","location":{"end":{"column":15,"line":72},"start":{"column":12,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"104","location":{"end":{"column":4,"line":78},"start":{"column":7,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"105","location":{"end":{"column":66,"line":74},"start":{"column":47,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"103","location":{"end":{"column":2,"line":82},"start":{"column":37,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"107","location":{"end":{"column":6,"line":76},"start":{"column":73,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"106","location":{"end":{"column":64,"line":74},"start":{"column":57,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"108","location":{"end":{"column":15,"line":75},"start":{"column":13,"line":75}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"109","location":{"end":{"column":4,"line":81},"start":{"column":17,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"114","location":{"end":{"column":17,"line":112},"start":{"column":11,"line":112}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"111","location":{"end":{"column":6,"line":90},"start":{"column":3,"line":90}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":6,"line":139},"start":{"column":9,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"112","location":{"end":{"column":4,"line":143},"start":{"column":23,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"110","location":{"end":{"column":40,"line":80},"start":{"column":26,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"117","location":{"end":{"column":16,"line":113},"start":{"column":11,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"116","location":{"end":{"column":16,"line":113},"start":{"column":11,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"115","location":{"end":{"column":17,"line":112},"start":{"column":11,"line":112}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"118","location":{"end":{"column":22,"line":114},"start":{"column":11,"line":114}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"119","location":{"end":{"column":22,"line":114},"start":{"column":11,"line":114}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"121","location":{"end":{"column":31,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"122","location":{"end":{"column":31,"line":115},"start":{"column":11,"line":115}},"mutatorName":"EqualityOperator","replacement":"hidden === undefined","status":"Survived"},{"id":"120","location":{"end":{"column":31,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"126","location":{"end":{"column":15,"line":117},"start":{"column":11,"line":117}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"125","location":{"end":{"column":15,"line":117},"start":{"column":11,"line":117}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"123","location":{"end":{"column":19,"line":116},"start":{"column":11,"line":116}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"124","location":{"end":{"column":19,"line":116},"start":{"column":11,"line":116}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"127","location":{"end":{"column":23,"line":119},"start":{"column":11,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"129","location":{"end":{"column":8,"line":123},"start":{"column":25,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"128","location":{"end":{"column":23,"line":119},"start":{"column":11,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"131","location":{"end":{"column":51,"line":122},"start":{"column":16,"line":122}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"130","location":{"end":{"column":21,"line":121},"start":{"column":18,"line":121}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"132","location":{"end":{"column":15,"line":125},"start":{"column":11,"line":125}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"134","location":{"end":{"column":8,"line":127},"start":{"column":17,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"133","location":{"end":{"column":15,"line":125},"start":{"column":11,"line":125}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"135","location":{"end":{"column":48,"line":126},"start":{"column":45,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"136","location":{"end":{"column":73,"line":126},"start":{"column":54,"line":126}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"137","location":{"end":{"column":16,"line":129},"start":{"column":11,"line":129}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"138","location":{"end":{"column":16,"line":129},"start":{"column":11,"line":129}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"139","location":{"end":{"column":8,"line":131},"start":{"column":18,"line":129}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"140","location":{"end":{"column":50,"line":130},"start":{"column":47,"line":130}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"141","location":{"end":{"column":77,"line":130},"start":{"column":56,"line":130}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"143","location":{"end":{"column":42,"line":141},"start":{"column":28,"line":141}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"142","location":{"end":{"column":6,"line":142},"start":{"column":19,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"144","location":{"end":{"column":18,"line":151},"start":{"column":12,"line":151}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"145","location":{"end":{"column":2,"line":176},"start":{"column":40,"line":151}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"146","location":{"end":{"column":4,"line":165},"start":{"column":7,"line":152}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"148","location":{"end":{"column":20,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"147","location":{"end":{"column":20,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"149","location":{"end":{"column":20,"line":160},"start":{"column":9,"line":160}},"mutatorName":"BooleanLiteral","replacement":"collection","status":"Survived"},{"id":"150","location":{"end":{"column":6,"line":162},"start":{"column":22,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"151","location":{"end":{"column":66,"line":161},"start":{"column":35,"line":161}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"155","location":{"end":{"column":32,"line":167},"start":{"column":9,"line":167}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"153","location":{"end":{"column":4,"line":175},"start":{"column":17,"line":165}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"154","location":{"end":{"column":32,"line":167},"start":{"column":9,"line":167}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"152","location":{"end":{"column":64,"line":161},"start":{"column":42,"line":161}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"156","location":{"end":{"column":32,"line":167},"start":{"column":9,"line":167}},"mutatorName":"EqualityOperator","replacement":"err.kind !== 'ObjectId'","status":"Survived"},{"id":"158","location":{"end":{"column":6,"line":169},"start":{"column":34,"line":167}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"157","location":{"end":{"column":32,"line":167},"start":{"column":22,"line":167}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"160","location":{"end":{"column":64,"line":168},"start":{"column":42,"line":168}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"159","location":{"end":{"column":66,"line":168},"start":{"column":35,"line":168}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"161","location":{"end":{"column":76,"line":173},"start":{"column":9,"line":173}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"162","location":{"end":{"column":18,"line":183},"start":{"column":12,"line":183}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"163","location":{"end":{"column":2,"line":237},"start":{"column":40,"line":183}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"164","location":{"end":{"column":12,"line":197},"start":{"column":7,"line":197}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"165","location":{"end":{"column":12,"line":197},"start":{"column":7,"line":197}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"167","location":{"end":{"column":18,"line":198},"start":{"column":7,"line":198}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"166","location":{"end":{"column":18,"line":198},"start":{"column":7,"line":198}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"170","location":{"end":{"column":15,"line":200},"start":{"column":7,"line":200}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"169","location":{"end":{"column":13,"line":199},"start":{"column":7,"line":199}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"168","location":{"end":{"column":13,"line":199},"start":{"column":7,"line":199}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"171","location":{"end":{"column":15,"line":200},"start":{"column":7,"line":200}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"172","location":{"end":{"column":11,"line":201},"start":{"column":7,"line":201}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"173","location":{"end":{"column":11,"line":201},"start":{"column":7,"line":201}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"175","location":{"end":{"column":19,"line":203},"start":{"column":7,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"174","location":{"end":{"column":19,"line":203},"start":{"column":7,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"176","location":{"end":{"column":4,"line":207},"start":{"column":21,"line":203}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"178","location":{"end":{"column":47,"line":206},"start":{"column":12,"line":206}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"177","location":{"end":{"column":17,"line":205},"start":{"column":14,"line":205}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"179","location":{"end":{"column":11,"line":209},"start":{"column":7,"line":209}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"181","location":{"end":{"column":4,"line":211},"start":{"column":13,"line":209}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"182","location":{"end":{"column":44,"line":210},"start":{"column":41,"line":210}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"180","location":{"end":{"column":11,"line":209},"start":{"column":7,"line":209}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"184","location":{"end":{"column":12,"line":213},"start":{"column":7,"line":213}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"183","location":{"end":{"column":69,"line":210},"start":{"column":50,"line":210}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"185","location":{"end":{"column":12,"line":213},"start":{"column":7,"line":213}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"187","location":{"end":{"column":46,"line":214},"start":{"column":43,"line":214}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"186","location":{"end":{"column":4,"line":215},"start":{"column":14,"line":213}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"188","location":{"end":{"column":73,"line":214},"start":{"column":52,"line":214}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"189","location":{"end":{"column":4,"line":232},"start":{"column":7,"line":217}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"190","location":{"end":{"column":8,"line":221},"start":{"column":7,"line":219}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"191","location":{"end":{"column":35,"line":223},"start":{"column":7,"line":223}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"192","location":{"end":{"column":18,"line":223},"start":{"column":14,"line":223}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"193","location":{"end":{"column":33,"line":223},"start":{"column":28,"line":223}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"194","location":{"end":{"column":20,"line":226},"start":{"column":9,"line":226}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"195","location":{"end":{"column":20,"line":226},"start":{"column":9,"line":226}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"196","location":{"end":{"column":20,"line":226},"start":{"column":9,"line":226}},"mutatorName":"BooleanLiteral","replacement":"collection","status":"Survived"},{"id":"197","location":{"end":{"column":6,"line":229},"start":{"column":22,"line":226}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"199","location":{"end":{"column":66,"line":228},"start":{"column":35,"line":228}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"200","location":{"end":{"column":64,"line":228},"start":{"column":42,"line":228}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"198","location":{"end":{"column":34,"line":227},"start":{"column":19,"line":227}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"202","location":{"end":{"column":56,"line":235},"start":{"column":33,"line":235}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"201","location":{"end":{"column":4,"line":236},"start":{"column":17,"line":232}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"204","location":{"end":{"column":21,"line":244},"start":{"column":15,"line":244}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"203","location":{"end":{"column":54,"line":235},"start":{"column":40,"line":235}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"205","location":{"end":{"column":2,"line":261},"start":{"column":43,"line":244}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"206","location":{"end":{"column":4,"line":257},"start":{"column":7,"line":245}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"207","location":{"end":{"column":20,"line":248},"start":{"column":9,"line":248}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"208","location":{"end":{"column":20,"line":248},"start":{"column":9,"line":248}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"211","location":{"end":{"column":66,"line":249},"start":{"column":35,"line":249}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"212","location":{"end":{"column":64,"line":249},"start":{"column":42,"line":249}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"210","location":{"end":{"column":6,"line":250},"start":{"column":22,"line":248}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"209","location":{"end":{"column":20,"line":248},"start":{"column":9,"line":248}},"mutatorName":"BooleanLiteral","replacement":"collection","status":"Survived"},{"id":"213","location":{"end":{"column":41,"line":256},"start":{"column":21,"line":256}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"214","location":{"end":{"column":4,"line":260},"start":{"column":17,"line":257}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"216","location":{"end":{"column":23,"line":268},"start":{"column":12,"line":268}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"215","location":{"end":{"column":47,"line":259},"start":{"column":33,"line":259}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"217","location":{"end":{"column":2,"line":287},"start":{"column":45,"line":268}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"218","location":{"end":{"column":4,"line":283},"start":{"column":7,"line":271}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"219","location":{"end":{"column":75,"line":272},"start":{"column":9,"line":272}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"222","location":{"end":{"column":75,"line":272},"start":{"column":9,"line":272}},"mutatorName":"EqualityOperator","replacement":"collection.likes.filter(like => like === req.body.id).length <= 0","status":"Survived"},{"id":"221","location":{"end":{"column":75,"line":272},"start":{"column":9,"line":272}},"mutatorName":"EqualityOperator","replacement":"collection.likes.filter(like => like === req.body.id).length >= 0","status":"Survived"},{"id":"223","location":{"end":{"column":63,"line":272},"start":{"column":33,"line":272}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"224","location":{"end":{"column":63,"line":272},"start":{"column":43,"line":272}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"220","location":{"end":{"column":75,"line":272},"start":{"column":9,"line":272}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"226","location":{"end":{"column":63,"line":272},"start":{"column":43,"line":272}},"mutatorName":"EqualityOperator","replacement":"like !== req.body.id","status":"Survived"},{"id":"225","location":{"end":{"column":63,"line":272},"start":{"column":43,"line":272}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"227","location":{"end":{"column":6,"line":276},"start":{"column":77,"line":272}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"230","location":{"end":{"column":4,"line":286},"start":{"column":17,"line":283}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"229","location":{"end":{"column":62,"line":275},"start":{"column":22,"line":275}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"228","location":{"end":{"column":64,"line":275},"start":{"column":15,"line":275}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"231","location":{"end":{"column":47,"line":285},"start":{"column":33,"line":285}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"232","location":{"end":{"column":25,"line":294},"start":{"column":12,"line":294}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"234","location":{"end":{"column":4,"line":316},"start":{"column":7,"line":297}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"233","location":{"end":{"column":2,"line":320},"start":{"column":47,"line":294}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"236","location":{"end":{"column":8,"line":300},"start":{"column":7,"line":299}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"240","location":{"end":{"column":68,"line":299},"start":{"column":41,"line":299}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"235","location":{"end":{"column":8,"line":300},"start":{"column":7,"line":299}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"238","location":{"end":{"column":68,"line":299},"start":{"column":31,"line":299}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"241","location":{"end":{"column":68,"line":299},"start":{"column":41,"line":299}},"mutatorName":"EqualityOperator","replacement":"like.user !== req.user.name","status":"Survived"},{"id":"239","location":{"end":{"column":68,"line":299},"start":{"column":41,"line":299}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"242","location":{"end":{"column":6,"line":305},"start":{"column":7,"line":301}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"237","location":{"end":{"column":8,"line":300},"start":{"column":7,"line":299}},"mutatorName":"EqualityOperator","replacement":"collection.likes.filter(like => like.user === req.user.name).length !== 0","status":"Survived"},{"id":"243","location":{"end":{"column":60,"line":304},"start":{"column":15,"line":304}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"244","location":{"end":{"column":58,"line":304},"start":{"column":22,"line":304}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"245","location":{"end":{"column":50,"line":308},"start":{"column":48,"line":307}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"246","location":{"end":{"column":4,"line":319},"start":{"column":17,"line":316}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"249","location":{"end":{"column":2,"line":349},"start":{"column":45,"line":327}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"247","location":{"end":{"column":47,"line":318},"start":{"column":33,"line":318}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"248","location":{"end":{"column":23,"line":327},"start":{"column":12,"line":327}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"250","location":{"end":{"column":4,"line":345},"start":{"column":7,"line":330}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"251","location":{"end":{"column":20,"line":333},"start":{"column":7,"line":332}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"252","location":{"end":{"column":20,"line":333},"start":{"column":7,"line":332}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"255","location":{"end":{"column":74,"line":332},"start":{"column":36,"line":332}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"253","location":{"end":{"column":20,"line":333},"start":{"column":7,"line":332}},"mutatorName":"EqualityOperator","replacement":"user.savedcollections.filter(col => col === req.body.collectionId).length >= 0","status":"Survived"},{"id":"256","location":{"end":{"column":74,"line":332},"start":{"column":45,"line":332}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"254","location":{"end":{"column":20,"line":333},"start":{"column":7,"line":332}},"mutatorName":"EqualityOperator","replacement":"user.savedcollections.filter(col => col === req.body.collectionId).length <= 0","status":"Survived"},{"id":"257","location":{"end":{"column":74,"line":332},"start":{"column":45,"line":332}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"258","location":{"end":{"column":74,"line":332},"start":{"column":45,"line":332}},"mutatorName":"EqualityOperator","replacement":"col !== req.body.collectionId","status":"Survived"},{"id":"259","location":{"end":{"column":6,"line":338},"start":{"column":7,"line":334}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"260","location":{"end":{"column":64,"line":337},"start":{"column":15,"line":337}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"261","location":{"end":{"column":62,"line":337},"start":{"column":22,"line":337}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"263","location":{"end":{"column":47,"line":347},"start":{"column":33,"line":347}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"262","location":{"end":{"column":4,"line":348},"start":{"column":17,"line":345}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"264","location":{"end":{"column":39,"line":356},"start":{"column":12,"line":356}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"267","location":{"end":{"column":43,"line":361},"start":{"column":9,"line":361}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"266","location":{"end":{"column":4,"line":368},"start":{"column":7,"line":360}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"265","location":{"end":{"column":2,"line":372},"start":{"column":61,"line":356}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"268","location":{"end":{"column":43,"line":361},"start":{"column":9,"line":361}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"269","location":{"end":{"column":43,"line":361},"start":{"column":9,"line":361}},"mutatorName":"EqualityOperator","replacement":"user.savedcollections.length !== 0","status":"Survived"},{"id":"270","location":{"end":{"column":6,"line":365},"start":{"column":45,"line":361}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"271","location":{"end":{"column":60,"line":364},"start":{"column":15,"line":364}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"272","location":{"end":{"column":58,"line":364},"start":{"column":22,"line":364}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"273","location":{"end":{"column":4,"line":371},"start":{"column":17,"line":368}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"274","location":{"end":{"column":47,"line":370},"start":{"column":33,"line":370}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"276","location":{"end":{"column":2,"line":401},"start":{"column":49,"line":389}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"275","location":{"end":{"column":27,"line":389},"start":{"column":12,"line":389}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"277","location":{"end":{"column":4,"line":397},"start":{"column":7,"line":392}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"278","location":{"end":{"column":4,"line":400},"start":{"column":17,"line":397}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"280","location":{"end":{"column":23,"line":408},"start":{"column":12,"line":408}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"282","location":{"end":{"column":4,"line":423},"start":{"column":7,"line":411}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"279","location":{"end":{"column":40,"line":399},"start":{"column":26,"line":399}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"281","location":{"end":{"column":2,"line":427},"start":{"column":45,"line":408}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"284","location":{"end":{"column":77,"line":413},"start":{"column":7,"line":413}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"283","location":{"end":{"column":77,"line":413},"start":{"column":7,"line":413}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"285","location":{"end":{"column":77,"line":413},"start":{"column":7,"line":413}},"mutatorName":"EqualityOperator","replacement":"collection.tags.filter(tag => tag.toString() === req.tag).length >= 0","status":"Survived"},{"id":"286","location":{"end":{"column":77,"line":413},"start":{"column":7,"line":413}},"mutatorName":"EqualityOperator","replacement":"collection.tags.filter(tag => tag.toString() === req.tag).length <= 0","status":"Survived"},{"id":"287","location":{"end":{"column":65,"line":413},"start":{"column":30,"line":413}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"288","location":{"end":{"column":65,"line":413},"start":{"column":39,"line":413}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"289","location":{"end":{"column":65,"line":413},"start":{"column":39,"line":413}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"290","location":{"end":{"column":65,"line":413},"start":{"column":39,"line":413}},"mutatorName":"EqualityOperator","replacement":"tag.toString() !== req.tag","status":"Survived"},{"id":"291","location":{"end":{"column":6,"line":416},"start":{"column":7,"line":414}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"295","location":{"end":{"column":47,"line":425},"start":{"column":33,"line":425}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"292","location":{"end":{"column":78,"line":415},"start":{"column":35,"line":415}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"297","location":{"end":{"column":2,"line":451},"start":{"column":45,"line":439}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"293","location":{"end":{"column":76,"line":415},"start":{"column":42,"line":415}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"296","location":{"end":{"column":23,"line":439},"start":{"column":12,"line":439}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"294","location":{"end":{"column":4,"line":426},"start":{"column":17,"line":423}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"299","location":{"end":{"column":65,"line":443},"start":{"column":47,"line":443}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"298","location":{"end":{"column":4,"line":447},"start":{"column":7,"line":442}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"300","location":{"end":{"column":6,"line":445},"start":{"column":72,"line":443}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"301","location":{"end":{"column":15,"line":444},"start":{"column":13,"line":444}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"302","location":{"end":{"column":4,"line":450},"start":{"column":17,"line":447}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"303","location":{"end":{"column":40,"line":449},"start":{"column":26,"line":449}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"const express = require('express');\n\nconst router = express.Router();\n\nconst Collection = require('../../models/Collection');\nconst User = require('../../models/user');\n\n/* ================== Collection Schema ==================\n  author: {},       // The creator of the collection - references user table\n  title: {},        // The title of the collection - string\n  description: {},  // The description of the collection - string\n  hidden: {},      // Whether the collection is hidden(private) or public - boolean\n  contributors: [], // Contributors with edit access - array references users table\n  text: {},         // The content of the collection - string\n  links: [],        // Links in the collection - array of strings\n  likes: [],        // Likes on the collection - array of users - references users table\n  category: {},     // Category of the collection - String\n  tags: [],         // Tags on a collection - Array of Strings\n  updated: {}       // The last date the collection was updated - default date.now when saved\n  ========================================================\n*/\n\n/*\n================== Collection Routes ==================\nGET '/api/collections'  - Get all collections in database - sorted by date\nPOST '/api/collections'  - Create a new collection\nGET '/api/collections/:id' - Get a collection by ID\nPUT '/api/collections/:id' - Edit or update a collection\n\n// PUT - 'api/collections/save/:id' - Save a collection\n\nDELETE - '/api/collections/:id' - Delete a collection\nPUT - 'api/collections/like/:id' - Like a collection\nPUT - 'api/collections/unlike/:id' - Unlike a collection\nPUT -     'api/collections/links/:id' - Add a link to a collection\nDELETE - 'api/collections/links/:id' - Delete a link from a collection\nPUT - 'api/collections/category/:id' - Update collection category\nPUT - 'api/collections/tags/:id' - Update collection tags\nPUT - 'api/collections/contributors/:id' - Update contributors on a collection\n=======================================================\n*/\n\n/*\nSave a collection\nGet all public collections for a user\nGet all private collections for a logged in user\nGet all public collections for a logged in user\nGet all saved collections\n*/\n\n// Schema reference\n\n/*\nauthor: {},\ntitle: {},\ndescription: {},\nhidden: {},\ncontributors: [],\ntext: {},\nlinks: [],\nlikes: [],\ncategory: {},\ntags: [],\nupdated: {}\n*/\n\n// GET '/api/collections'  - Get all collections in database - sorted by date\n// @route   GET api/collections\n// @desc    Get all collections\n// @access  Public\n\nrouter.get('/', async (req, res) => {\n  try {\n    const collections = await Collection.find({ hidden: 'false' }).sort({\n      date: -1,\n    });\n    res.json(collections);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// POST '/api/collections'  - Create a new collection\n// @route   POST api/collections\n// @desc    Create a collection\n// @access  Private\n\nrouter.post(\n  '/', // Add validation middleware here\n  async (req, res) => {\n    // console.log('invoked collection.post req.body', req.body);\n    try {\n      // Check for user here and add code to validate logged in user\n      // Get username for user from the database\n      // Get the user ID\n\n      const {\n        author,\n        title,\n        description,\n        hidden,\n        contributors,\n        text,\n        category,\n        tags,\n        links,\n      } = req.body;\n\n      const collectionDetails = {};\n\n      if (author) collectionDetails.author = author;\n      if (title) collectionDetails.title = title;\n      if (description) collectionDetails.description = description;\n      if (hidden !== undefined) collectionDetails.hidden = hidden;\n      if (category) collectionDetails.category = category;\n      if (text) collectionDetails.text = text;\n\n      if (contributors) {\n        collectionDetails.contributors = contributors\n          .split(',')\n          .map((contributor) => contributor.trim());\n      }\n\n      if (tags) {\n        collectionDetails.tags = tags.split(',').map((tag) => tag.trim());\n      }\n\n      if (links) {\n        collectionDetails.links = links.split(',').map((link) => link.trim());\n      }\n\n      // console.log('collectionDetails', collectionDetails);\n      const collection = new Collection(collectionDetails);\n\n      await collection.save();\n\n      res.status(200).json(collection);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// GET '/api/collections/:id' - Get a collection by ID\n// @route   GET api/collections/:id\n// @desc    Get a collection by ID\n// @access  Private\n\nrouter.get('/:id', async (req, res) => {\n  try {\n    // Get user ID\n\n    const collection = await Collection.findById(req.params.id);\n\n    // Check if collection is public or private\n    // If collection is private - check if user has access to view collection\n\n    if (!collection) {\n      return res.status(404).json({ msg: 'Collection not found' });\n    }\n\n    return res.json(collection);\n  } catch (err) {\n    console.error(err.message);\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({ msg: 'Collection not found' });\n    }\n    return res\n      .status(500)\n      .send(\n        'Server Error or Collection not found due to invalid Collection ID'\n      );\n  }\n});\n\n// PUT '/api/collections/:id' - Edit or update a collection\n// @route   PUT api/collections/:id\n// @desc    Update a collection by ID\n// @access  Private\n\nrouter.put('/:id', async (req, res) => {\n  const {\n    title,\n    description,\n    hidden,\n    contributors,\n    text,\n    category,\n    tags,\n    links,\n  } = req.body;\n\n  const collectionDetails = {};\n\n  if (title) collectionDetails.title = title;\n  if (description) collectionDetails.description = description;\n  if (hidden) collectionDetails.hidden = hidden;\n  if (category) collectionDetails.category = category;\n  if (text) collectionDetails.text = text;\n\n  if (contributors) {\n    collectionDetails.contributors = contributors\n      .split(',')\n      .map((contributor) => contributor.trim());\n  }\n\n  if (tags) {\n    collectionDetails.tags = tags.split(',').map((tag) => tag.trim());\n  }\n\n  if (links) {\n    collectionDetails.links = links.split(',').map((link) => link.trim());\n  }\n\n  try {\n    const collection = await Collection.findOneAndUpdate(\n      {\n        _id: req.params.id,\n      },\n      collectionDetails,\n      { new: true, upsert: false }\n    );\n\n    if (!collection) {\n      console.log('no collection');\n      return res.status(404).json({ msg: 'Collection not found' });\n    }\n\n    return res.json(collection);\n  } catch (err) {\n    console.error(err.message);\n\n    return res.status(500).json({ msg: 'Server Error' });\n  }\n});\n\n// DELETE - '/api/collections/:id' - Delete a collection\n// @route   DELETE api/collections/:id\n// @desc    Delete a collection by ID\n// @access  Private\n\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const collection = await Collection.findById(req.params.id);\n\n    if (!collection) {\n      return res.status(404).json({ msg: 'Collection not found' });\n    }\n\n    // TO DO: Check if user is authorized to delete post\n\n    await collection.remove();\n\n    return res.json('Collection Deleted');\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// PUT - 'api/collections/like/:id' - Like a collection\n// @route   DELETE api/collections/:id\n// @desc    Delete a collection by ID\n// @access  Private\n\nrouter.put('/like/:id', async (req, res) => {\n  const collection = await Collection.findById(req.body.collectionId);\n\n  try {\n    if (collection.likes.filter((like) => like === req.body.id).length > 0) {\n      return res\n        .status(400)\n        .json({ msg: 'You have already liked this collection' });\n    }\n\n    collection.likes.push(req.body.id);\n\n    await collection.save();\n\n    return res.send(collection.likes);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// PUT - 'api/collections/unlike/:id' - Unlike a collection\n// @route   DELETE api/collections/:id\n// @desc    Delete a collection by ID\n// @access  Private\n\nrouter.put('/unlike/:id', async (req, res) => {\n  const collection = await Collection.findById(req.params.id);\n\n  try {\n    if (\n      collection.likes.filter((like) => like.user === req.user.name).length ===\n      0\n    ) {\n      return res\n        .status(400)\n        .json({ msg: 'You have not liked this collection' });\n    }\n\n    const indexToRemove = collection.likes.map((like) =>\n      like.user.toString().indexOf(req.user.name)\n    );\n\n    collection.likes.splice(indexToRemove, 1);\n\n    await collection.save();\n\n    return res.send(collection.likes);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// PUT - 'api/collections/save/:id' - Save a collection\n// @route   PUT api/collections/:id\n// @desc    Save a collection by ID\n// @access  Private\n\nrouter.put('/save/:id', async (req, res) => {\n  const user = await User.findById(req.body.id);\n\n  try {\n    if (\n      user.savedcollections.filter((col) => col === req.body.collectionId)\n        .length > 0\n    ) {\n      return res\n        .status(400)\n        .json({ msg: 'You have already saved this collection' });\n    }\n\n    user.savedcollections.push(req.body.collectionId);\n\n    await user.save();\n\n    return res.send(user.savedcollections);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// GET - 'api/collections/savedcollections' - Get saved collections\n// @route   GET api/collections/savedcollections\n// @desc    Get saved collections for logged in user\n// @access  Private\n\nrouter.get('/savedcollections/:userId', async (req, res) => {\n  // const collection = await Collection.findById((req.body.collectionId));\n  const user = await User.findById(req.params.userId);\n\n  try {\n    if (user.savedcollections.length === 0) {\n      return res\n        .status(400)\n        .json({ msg: 'You have not saved any collections' });\n    }\n\n    return res.send(user.savedcollections);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// PUT -     'api/collections/links/:id' - Add a link to a collection\n// @route   DELETE api/collections/:id\n// @desc    Delete a collection by ID\n// @access  Private\n\n// DELETE - 'api/collections/links/:id' - Delete a link from a collection\n// @route   DELETE api/collections/:id\n// @desc    Delete a collection by ID\n// @access  Private\n\n// PUT - 'api/collections/category/:id' - Update collection category\n// @route   PUT api/collections/:id\n// @desc    Update collection category\n// @access  Private\n\nrouter.put('/category/:id', async (req, res) => {\n  const collection = Collection.findById(req.params.id);\n\n  try {\n    collection.category = req.category;\n\n    await collection.save();\n    res.send(collection.category);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// PUT - 'api/collections/tags/:id' - Update collection tags\n// @route   PUT api/collections/:id\n// @desc    Update tags on a collection\n// @access  Private\n\nrouter.put('/tags/:id', async (req, res) => {\n  const collection = Collection.findById(req.params.id);\n\n  try {\n    if (\n      collection.tags.filter((tag) => tag.toString() === req.tag).length > 0\n    ) {\n      return res.status(400).json({ msg: 'Tag already exists on collection' });\n    }\n\n    collection.tags.push(req.tag);\n\n    await collection.save();\n\n    return res.send(collection.tags);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\n// PUT - 'api/collections/contributors/:id' - Update contributors on a collection\n// @route   PUT api/collections/:id\n// @desc    Update contributors on a collection\n// @access  Private\n\n// GET '/api/collections/user/:userId' - Get a collection by userId\n// @route   GET '/api/collections/user/:userId'\n// @desc    Get a collection by userI\n// @access  Public\n\nrouter.get('/user/:id', async (req, res) => {\n  const userId = req.params.id;\n\n  try {\n    const collections = await Collection.find({ author: userId }).sort({\n      date: -1,\n    });\n    res.json(collections);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\nmodule.exports = router;\n"},"/Users/steve/learnvault/server/server.js":{"language":"javascript","mutants":[{"id":"304","location":{"end":{"column":28,"line":1},"start":{"column":22,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"305","location":{"end":{"column":34,"line":2},"start":{"column":25,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"306","location":{"end":{"column":36,"line":3},"start":{"column":26,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"307","location":{"end":{"column":45,"line":4},"start":{"column":30,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"308","location":{"end":{"column":29,"line":5},"start":{"column":21,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"309","location":{"end":{"column":52,"line":7},"start":{"column":32,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"310","location":{"end":{"column":50,"line":8},"start":{"column":29,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"311","location":{"end":{"column":38,"line":11},"start":{"column":14,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"312","location":{"end":{"column":38,"line":11},"start":{"column":14,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"313","location":{"end":{"column":38,"line":11},"start":{"column":14,"line":11}},"mutatorName":"LogicalOperator","replacement":"process.env.PORT && 5000","status":"Survived"},{"id":"315","location":{"end":{"column":59,"line":17},"start":{"column":51,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"316","location":{"end":{"column":67,"line":17},"start":{"column":61,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"314","location":{"end":{"column":49,"line":17},"start":{"column":45,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"317","location":{"end":{"column":41,"line":18},"start":{"column":22,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"318","location":{"end":{"column":39,"line":18},"start":{"column":34,"line":18}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"319","location":{"end":{"column":25,"line":21},"start":{"column":10,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"320","location":{"end":{"column":22,"line":22},"start":{"column":10,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"322","location":{"end":{"column":26,"line":26},"start":{"column":9,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"324","location":{"end":{"column":2,"line":28},"start":{"column":57,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"325","location":{"end":{"column":27,"line":31},"start":{"column":9,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"323","location":{"end":{"column":41,"line":26},"start":{"column":28,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"326","location":{"end":{"column":63,"line":31},"start":{"column":37,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"328","location":{"end":{"column":2,"line":36},"start":{"column":28,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"327","location":{"end":{"column":12,"line":34},"start":{"column":9,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"329","location":{"end":{"column":41,"line":35},"start":{"column":37,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"330","location":{"end":{"column":51,"line":35},"start":{"column":43,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"334","location":{"end":{"column":24,"line":44},"start":{"column":20,"line":44}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"332","location":{"end":{"column":73,"line":35},"start":{"column":61,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"331","location":{"end":{"column":59,"line":35},"start":{"column":53,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"333","location":{"end":{"column":2,"line":48},"start":{"column":34,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"335","location":{"end":{"column":27,"line":45},"start":{"column":23,"line":45}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"337","location":{"end":{"column":26,"line":47},"start":{"column":21,"line":47}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"338","location":{"end":{"column":14,"line":51},"start":{"column":7,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"340","location":{"end":{"column":15,"line":52},"start":{"column":9,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"341","location":{"end":{"column":2,"line":56},"start":{"column":23,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"321","location":{"end":{"column":22,"line":23},"start":{"column":9,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"336","location":{"end":{"column":23,"line":46},"start":{"column":19,"line":46}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"339","location":{"end":{"column":63,"line":51},"start":{"column":44,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"342","location":{"end":{"column":4,"line":55},"start":{"column":26,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"343","location":{"end":{"column":49,"line":54},"start":{"column":17,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"const path = require('path');\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cookieParser = require('cookie-parser');\nconst env = require('dotenv').config();\n\nconst userController = require('./controllers/user');\nconst verifyToken = require('./utils/verifyToken');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// ------\n// Routes\n// ------\n\napp.use(express.static(path.join(__dirname, '..', 'client', 'dist')));\napp.use(express.json({ extended: false }));\napp.use(cookieParser());\n\napp.post('/api/register', userController.registerUser);\napp.post('/api/login', userController.loginUser);\napp.get('/api/logout', userController.logoutUser);\n// Used to check if the users token is valid\n// Allows us to protect routes on the client side\napp.get('/api/checkToken', [verifyToken], (req, res) => {\n  res.status(200).send(res.locals.userId);\n});\n\n// Collection routes\napp.use('/api/collections', require('./routes/api/collections'));\n\n// Let React handle all other routes\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '..', 'client', 'dist', 'index.html'));\n});\n\n// -------------\n// Connect to DB\n// Then start server\n// -----------------\n\nmongoose.connect(process.env.DB, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useCreateIndex: true,\n  useFindAndModify: false,\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  app.listen(PORT, () => {\n    console.log(`Server running at port ${PORT}`);\n  });\n});\n"},"/Users/steve/learnvault/server/utils/verifyToken.js":{"language":"javascript","mutants":[{"id":"348","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"BooleanLiteral","replacement":"token","status":"Survived"},{"id":"347","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"349","location":{"end":{"column":4,"line":9},"start":{"column":15,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"350","location":{"end":{"column":50,"line":7},"start":{"column":17,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"351","location":{"end":{"column":4,"line":19},"start":{"column":70,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"352","location":{"end":{"column":12,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"353","location":{"end":{"column":12,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"344","location":{"end":{"column":35,"line":1},"start":{"column":21,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"345","location":{"end":{"column":2,"line":20},"start":{"column":41,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"354","location":{"end":{"column":6,"line":14},"start":{"column":14,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"355","location":{"end":{"column":64,"line":13},"start":{"column":35,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"346","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"}],"source":"const jwt = require('jsonwebtoken');\n\nconst verifyToken = (req, res, next) => {\n  const { token } = req.cookies;\n\n  if (!token) {\n    res.error = 'Unauthorized: No token provided';\n    return res.status(401).send(res.error);\n  }\n\n  return jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n    if (err) {\n      return res.status(401).send('Unauthorized: Invalid token');\n    }\n\n    res.locals.userId = JSON.stringify(decoded.userId);\n    // console.log('verifyToken userId', res.locals.userId);\n    return next();\n  });\n};\n\nmodule.exports = verifyToken;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};